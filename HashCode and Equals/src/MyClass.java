import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Map.Entry;


/**
 * http://stackoverflow.com/questions/2265503/why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java
 * @author kumaj04
 * It is not always necessary to override hashcode and equals. But if you think you need to override one, then you need to override both of them. Let's analyze what whould happen if we override one but not the other and we attempt to use a Map.

Say we have a class like this and that two objects of MyClass are equal if their importantField is equal (with hashCode and equals generated by eclipse)
 */
public class MyClass {
	private final String importantField;
	private final String anotherField;
	private HashMap<String, String> map;
	
	public MyClass(final String equalField, final String anotherField) {
		this.importantField = equalField;
		this.anotherField = anotherField;
	}
	
	public String getEqualField() {
		return importantField;
	}
	
	public String getAnotherField() {
		return anotherField;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;// why the fuck do we use prime no.
		int result = 1;
		result = prime * result + ((importantField == null) ? 0 : importantField.hashCode());
		return result;
	}
	// Comment equals method and check the count of map
	@Override
	public boolean equals(final Object obj) {
		if(this == obj)
			return true;
		if(obj == null)
			return false;
		if(getClass() != obj.getClass())
			return false;
		//typecast the obj into MyClass
		final MyClass other = (MyClass) obj;
		if(importantField == null) {
			if(other.importantField != null)
				return false;
		} else if(!importantField.equals(other.getEqualField()))
			return false;
		return true;
	}
}

class Solution {
	public static void main(String[] args) {
		MyClass first = new MyClass("a", "first");
		MyClass second = new MyClass("a", "second");
		
		System.out.println(first == second);
		System.out.println(first.equals(second));
		
		Map<MyClass, Integer> map = new Hashtable<MyClass, Integer>();
		map.put(first, 1);
		map.put(second, 2);
		
		System.out.println("Total elements in map : " + map.size());
		for (Entry<MyClass, Integer> set : map.entrySet()) {
			System.out.println(set.getKey().getEqualField() + " " + set.getKey().getAnotherField() + " " + set.getValue());
		}
		
		
		System.out.println(map.containsKey(second));
		map.remove(second);
		
		System.out.println("Total elements in map after removal : " + map.size());
		/**
		 * When we try to insert any key in HashMap first it checks whether any other object present with same hashcode and if yes then it checks for the equals() method. 
		 * If two objects are same then HashMap will not add that key instead it will replace the old value by new one.
		 */
		
	}
}
